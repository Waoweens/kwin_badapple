//! # D-Bus interface proxy for: `org.kde.kwin.Scripting`
//!
//! This code was generated by `zbus-xmlgen` `4.1.0` from D-Bus introspection data.
//! Source: `Interface '/Scripting' from service 'org.kde.KWin' on system bus`.
//!
//! You may prefer to adapt it, instead of using it verbatim.
//!
//! More information can be found in the [Writing a client proxy] section of the zbus
//! documentation.
//!
//! This type implements the [D-Bus standard interfaces], (`org.freedesktop.DBus.*`) for which the
//! following zbus API can be used:
//!
//! * [`zbus::fdo::PropertiesProxy`]
//! * [`zbus::fdo::IntrospectableProxy`]
//! * [`zbus::fdo::PeerProxy`]
//!
//! Consequently `zbus-xmlgen` did not generate code for the above interfaces.
//!
//! [Writing a client proxy]: https://dbus2.github.io/zbus/client.html
//! [D-Bus standard interfaces]: https://dbus.freedesktop.org/doc/dbus-specification.html#standard-interfaces,
use zbus::proxy;
#[proxy(
	interface = "org.kde.kwin.Scripting",
	default_service = "org.kde.KWin",
	default_path = "/Scripting"
)]
trait Scripting {
	/// isScriptLoaded method
	#[zbus(name = "isScriptLoaded")]
	fn is_script_loaded(&self, plugin_name: &str) -> zbus::Result<bool>;

	/// loadDeclarativeScript method
	#[zbus(name = "loadDeclarativeScript")]
	fn load_declarative_script_(&self, file_path: &str, plugin_name: &str) -> zbus::Result<i32>;

	/// loadDeclarativeScript method
	#[zbus(name = "loadDeclarativeScript")]
	fn load_declarative_script(&self, file_path: &str) -> zbus::Result<i32>;

	/// loadScript method
	#[zbus(name = "loadScript")]
	fn load_script_(&self, file_path: &str, plugin_name: &str) -> zbus::Result<i32>;

	/// loadScript method
	#[zbus(name = "loadScript")]
	fn load_script(&self, file_path: &str) -> zbus::Result<i32>;

	/// start method
	#[zbus(name = "start")]
	fn start(&self) -> zbus::Result<()>;

	/// unloadScript method
	#[zbus(name = "unloadScript")]
	fn unload_script(&self, plugin_name: &str) -> zbus::Result<bool>;
}
